[gd_scene load_steps=17 format=2]

[ext_resource path="res://UI/UI.gd" type="Script" id=1]
[ext_resource path="res://Art/HealthBar/healthbar-512x1536.png" type="Texture" id=2]
[ext_resource path="res://Art/HealthBar/healthbar fill.png" type="Texture" id=3]
[ext_resource path="res://Assets/JetBrainsMono-SemiBold.ttf" type="DynamicFontData" id=4]
[ext_resource path="res://Resources/NoiseTextures/seamless_texture8.png" type="Texture" id=5]
[ext_resource path="res://Resources/NoiseTextures/experimental_texture006.png" type="Texture" id=6]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec2 scrollSpeed1 = vec2(1.0,1.0);
uniform vec2 scrollSpeed2 = vec2(1.0,1.0);

uniform vec2 scaleOffset1 = vec2(1.0,1.0);
uniform vec2 scaleOffset2 = vec2(1.0,1.0);

uniform vec4 underColor : hint_color;
uniform vec4 overColor : hint_color;

uniform sampler2D texture1;
uniform sampler2D texture2;

uniform float bonusEnergy1 = 1.0;
uniform float bonusEnergy2 = 1.0;

uniform sampler2D gradient;

//void fragment(){
//	COLOR = texture(TEXTURE, UV);
//	if (COLOR.b > 0.9) {COLOR = overColor;}
//	if (COLOR.g > 0.9) {COLOR = underColor;}
//	float color1 = bonusEnergy1 + texture(texture1, scaleOffset1 * UV + scrollSpeed1 * TIME).r;
//	float color2 = bonusEnergy2 + texture(texture2, scaleOffset2 * UV + scrollSpeed2 * TIME).r;
//	float energy = color1 * color2 ;
//	if (COLOR.r > 0.9) {COLOR = texture(gradient, vec2(energy));}
//}"

[sub_resource type="Gradient" id=3]
offsets = PoolRealArray( 0.0516129, 0.341935, 0.567742, 0.76129 )
colors = PoolColorArray( 0.193436, 0.117874, 0.402344, 1, 0.132813, 0.132813, 0.132813, 1, 0.227226, 0.219908, 0.172123, 1, 0, 1, 0.929688, 1 )

[sub_resource type="GradientTexture" id=4]
gradient = SubResource( 3 )

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/scrollSpeed1 = Vector2( -1.026, 0 )
shader_param/scrollSpeed2 = Vector2( 0.049, 0 )
shader_param/scaleOffset1 = Vector2( -0.964, 0.439 )
shader_param/scaleOffset2 = Vector2( 0.774, 0.339 )
shader_param/underColor = Color( 0.560784, 0.619608, 0.54902, 1 )
shader_param/overColor = Color( 0, 0, 0, 1 )
shader_param/bonusEnergy1 = 0.746
shader_param/bonusEnergy2 = -0.122
shader_param/texture1 = ExtResource( 5 )
shader_param/texture2 = ExtResource( 6 )
shader_param/gradient = SubResource( 4 )

[sub_resource type="DynamicFont" id=8]
size = 24
use_filter = true
font_data = ExtResource( 4 )

[sub_resource type="Animation" id=9]
resource_name = "Print"
tracks/0/type = "value"
tracks/0/path = NodePath("TextBox:percent_visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}

[sub_resource type="Animation" id=10]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("TextBox:percent_visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1.0 ]
}

[sub_resource type="Animation" id=5]
resource_name = "In"
length = 0.6
tracks/0/type = "value"
tracks/0/path = NodePath("Curtain:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6 ),
"transitions": PoolRealArray( 2, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Animation" id=7]
resource_name = "Out"
length = 0.4
tracks/0/type = "value"
tracks/0/path = NodePath("Curtain:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=6]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Curtain:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[node name="UI" type="CanvasLayer" groups=["UI"]]
pause_mode = 2
script = ExtResource( 1 )

[node name="WholeScreen" type="VBoxContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="HealthBar" type="TextureProgress" parent="WholeScreen"]
unique_name_in_owner = true
material = SubResource( 2 )
margin_right = 360.0
margin_bottom = 120.0
rect_min_size = Vector2( 360, 120 )
size_flags_horizontal = 0
size_flags_vertical = 0
max_value = 5.0
step = 0.5
value = 5.0
texture_over = ExtResource( 2 )
texture_progress = ExtResource( 3 )
nine_patch_stretch = true

[node name="Control" type="Control" parent="WholeScreen"]
margin_top = 124.0
margin_right = 1280.0
margin_bottom = 616.0
size_flags_vertical = 3

[node name="HBoxContainer" type="HBoxContainer" parent="WholeScreen"]
margin_top = 620.0
margin_right = 1280.0
margin_bottom = 720.0
rect_min_size = Vector2( 0, 100 )
alignment = 1

[node name="Control2" type="Control" parent="WholeScreen/HBoxContainer"]
margin_right = 80.0
margin_bottom = 100.0
rect_min_size = Vector2( 80, 0 )

[node name="TextBox" type="RichTextLabel" parent="WholeScreen/HBoxContainer"]
unique_name_in_owner = true
margin_left = 84.0
margin_right = 1196.0
margin_bottom = 100.0
size_flags_horizontal = 3
custom_fonts/normal_font = SubResource( 8 )

[node name="Control" type="Control" parent="WholeScreen/HBoxContainer"]
margin_left = 1200.0
margin_right = 1280.0
margin_bottom = 100.0
rect_min_size = Vector2( 80, 0 )

[node name="TextPrinter" type="AnimationPlayer" parent="WholeScreen/HBoxContainer"]
unique_name_in_owner = true
anims/Print = SubResource( 9 )
anims/RESET = SubResource( 10 )

[node name="Curtain" type="ColorRect" parent="."]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 1 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/In = SubResource( 5 )
anims/Out = SubResource( 7 )
anims/RESET = SubResource( 6 )

[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
